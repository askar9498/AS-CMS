// <auto-generated />
using System;
using AS_CMS.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250802112829_AddMissingUserColumnsAndUserGroups")]
    partial class AddMissingUserColumnsAndUserGroups
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AS_CMS.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PermissionEnum")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PermissionEnum")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ead52393-02b9-4d0c-a9b8-b10ac620d487"),
                            Code = "GET_USER",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4099),
                            Description = "Can view user details",
                            IsActive = true,
                            Name = "Get User",
                            PermissionEnum = 0,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4099)
                        },
                        new
                        {
                            Id = new Guid("23f289f4-212f-4c93-97ca-ce23d9979f8c"),
                            Code = "REGISTER_USER",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4101),
                            Description = "Can register new users",
                            IsActive = true,
                            Name = "Register User",
                            PermissionEnum = 1,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4102)
                        },
                        new
                        {
                            Id = new Guid("3b58eb5f-f35f-4581-8257-af708a343a51"),
                            Code = "GET_ROLES",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4103),
                            Description = "Can view roles",
                            IsActive = true,
                            Name = "Get Roles",
                            PermissionEnum = 2,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4103)
                        },
                        new
                        {
                            Id = new Guid("7b053445-0821-433b-8a9c-95aa5fd6c951"),
                            Code = "GET_PERMISSIONS",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4104),
                            Description = "Can view permissions",
                            IsActive = true,
                            Name = "Get Permissions",
                            PermissionEnum = 10,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4105)
                        },
                        new
                        {
                            Id = new Guid("19b4f26d-18bd-4ba3-828a-a1b142ee93e1"),
                            Code = "GET_USERS",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4106),
                            Description = "Can view all users",
                            IsActive = true,
                            Name = "Get Users",
                            PermissionEnum = 9,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4106)
                        },
                        new
                        {
                            Id = new Guid("f9e93456-2cc6-450c-9dcc-67fa09c181ac"),
                            Code = "UPDATE_USER",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4107),
                            Description = "Can update user information",
                            IsActive = true,
                            Name = "Update User",
                            PermissionEnum = 7,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4107)
                        },
                        new
                        {
                            Id = new Guid("5d8d2010-20ae-41b3-8410-1d4f894f1606"),
                            Code = "DELETE_USER",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4108),
                            Description = "Can delete users",
                            IsActive = true,
                            Name = "Delete User",
                            PermissionEnum = 6,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4108)
                        },
                        new
                        {
                            Id = new Guid("af2bdfbb-9cf0-4c26-9ecc-dbccae0c1269"),
                            Code = "SEARCH_USER",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4111),
                            Description = "Can search users",
                            IsActive = true,
                            Name = "Search User",
                            PermissionEnum = 13,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4112)
                        },
                        new
                        {
                            Id = new Guid("44704977-117e-45cd-bf2a-c811ec4f01ee"),
                            Code = "RESET_PASSWORD",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4113),
                            Description = "Can reset user passwords",
                            IsActive = true,
                            Name = "Reset Password",
                            PermissionEnum = 4,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4113)
                        },
                        new
                        {
                            Id = new Guid("98c814af-a257-4094-bf29-f6577315c4ad"),
                            Code = "SET_ROLE",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4114),
                            Description = "Can assign roles to users",
                            IsActive = true,
                            Name = "Set Role",
                            PermissionEnum = 5,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4114)
                        },
                        new
                        {
                            Id = new Guid("f1546d50-12e0-4e25-b845-3e245edefdd9"),
                            Code = "ADD_ROLE",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4115),
                            Description = "Can create new roles",
                            IsActive = true,
                            Name = "Add Role",
                            PermissionEnum = 47,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4115)
                        },
                        new
                        {
                            Id = new Guid("1eadeb59-84f4-40e6-a87a-a2afa5bfb780"),
                            Code = "GET_USER_PERMISSIONS",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4116),
                            Description = "Can view user permissions",
                            IsActive = true,
                            Name = "Get User Permissions",
                            PermissionEnum = 4104,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4116)
                        },
                        new
                        {
                            Id = new Guid("659c1d82-a170-4666-bb37-b23e4f93cb7e"),
                            Code = "SET_USER_PERMISSIONS",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4117),
                            Description = "Can set user permissions",
                            IsActive = true,
                            Name = "Set User Permissions",
                            PermissionEnum = 46,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4117)
                        },
                        new
                        {
                            Id = new Guid("72a00946-cf57-4ce2-94d3-8b527aea527e"),
                            Code = "GET_USER_LOGIN_LOGS",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4118),
                            Description = "Can view user login logs",
                            IsActive = true,
                            Name = "Get User Login Logs",
                            PermissionEnum = 48,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4118)
                        },
                        new
                        {
                            Id = new Guid("9b1f2500-9ee5-47e3-999b-6bf9f1125e7b"),
                            Code = "SET_ACCURACY",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4119),
                            Description = "Can set user accuracy",
                            IsActive = true,
                            Name = "Set Accuracy",
                            PermissionEnum = 12,
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(4119)
                        });
                });

            modelBuilder.Entity("AS_CMS.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AS_CMS.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AS_CMS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivityField")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyNationalId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Expertise")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GoogleScholarLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OfficialDocumentsUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OrcidLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepresentativeEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RepresentativeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RepresentativeNationalId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepresentativePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ResearchGateLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ResumeUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SavedInterests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowPublicProfile")
                        .HasColumnType("bit");

                    b.Property<string>("SkillLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserGroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AS_CMS.Domain.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4086a4cd-ff38-402c-8a03-4dd9f2bbe10f"),
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(3931),
                            Description = "Administrator with full access",
                            IsActive = true,
                            Name = "Admin",
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(3935)
                        },
                        new
                        {
                            Id = new Guid("b2986afb-2b86-4e53-b6e5-069e2c61b837"),
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(3938),
                            Description = "Default group for individual users",
                            IsActive = true,
                            Name = "Individual",
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(3938)
                        },
                        new
                        {
                            Id = new Guid("2f30ec39-4a9d-4faf-b7d2-dc02d638d94a"),
                            CreatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(3939),
                            Description = "Default group for corporate users",
                            IsActive = true,
                            Name = "Corporate",
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 28, 28, 666, DateTimeKind.Utc).AddTicks(3939)
                        });
                });

            modelBuilder.Entity("AS_CMS.Domain.Entities.UserLoginLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginLogs");
                });

            modelBuilder.Entity("AS_CMS.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("PermissionUserGroup", b =>
                {
                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserGroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermissionsId", "UserGroupsId");

                    b.HasIndex("UserGroupsId");

                    b.ToTable("UserGroupPermissions", (string)null);
                });

            modelBuilder.Entity("AS_CMS.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("AS_CMS.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AS_CMS.Domain.Entities.User", b =>
                {
                    b.HasOne("AS_CMS.Domain.Entities.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("AS_CMS.Domain.Entities.UserLoginLog", b =>
                {
                    b.HasOne("AS_CMS.Domain.Entities.User", "User")
                        .WithMany("LoginLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AS_CMS.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("AS_CMS.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AS_CMS.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PermissionUserGroup", b =>
                {
                    b.HasOne("AS_CMS.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AS_CMS.Domain.Entities.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("UserGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AS_CMS.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AS_CMS.Domain.Entities.User", b =>
                {
                    b.Navigation("LoginLogs");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AS_CMS.Domain.Entities.UserGroup", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
